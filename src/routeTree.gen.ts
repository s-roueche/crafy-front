/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as UserIdReportsImport } from './routes/$userId.reports'
import { Route as UserIdCompaniesImport } from './routes/$userId.companies'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UserIdReportsRoute = UserIdReportsImport.update({
  id: '/$userId/reports',
  path: '/$userId/reports',
  getParentRoute: () => rootRoute,
} as any)

const UserIdCompaniesRoute = UserIdCompaniesImport.update({
  id: '/$userId/companies',
  path: '/$userId/companies',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$userId/companies': {
      id: '/$userId/companies'
      path: '/$userId/companies'
      fullPath: '/$userId/companies'
      preLoaderRoute: typeof UserIdCompaniesImport
      parentRoute: typeof rootRoute
    }
    '/$userId/reports': {
      id: '/$userId/reports'
      path: '/$userId/reports'
      fullPath: '/$userId/reports'
      preLoaderRoute: typeof UserIdReportsImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$userId/companies': typeof UserIdCompaniesRoute
  '/$userId/reports': typeof UserIdReportsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$userId/companies': typeof UserIdCompaniesRoute
  '/$userId/reports': typeof UserIdReportsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$userId/companies': typeof UserIdCompaniesRoute
  '/$userId/reports': typeof UserIdReportsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/$userId/companies' | '/$userId/reports'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/$userId/companies' | '/$userId/reports'
  id: '__root__' | '/' | '/$userId/companies' | '/$userId/reports'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  UserIdCompaniesRoute: typeof UserIdCompaniesRoute
  UserIdReportsRoute: typeof UserIdReportsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  UserIdCompaniesRoute: UserIdCompaniesRoute,
  UserIdReportsRoute: UserIdReportsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$userId/companies",
        "/$userId/reports"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$userId/companies": {
      "filePath": "$userId.companies.tsx"
    },
    "/$userId/reports": {
      "filePath": "$userId.reports.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
